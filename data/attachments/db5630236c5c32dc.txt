# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Verify login functionality >> Verify login with incorrect data
- Location: /usr/workspace/tests/login.spec.ts:23:10

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).not.toHaveText(expected)

Locator: locator('form div[class*="error-message-container"]')
Expected string: not "Epic sadface: Username and password do not match any user in this service"
Received string: "Epic sadface: Username and password do not match any user in this service"
Call log:
  - expect.not.toHaveText with timeout 5000ms
  - waiting for locator('form div[class*="error-message-container"]')
    9 × locator resolved to <div class="error-message-container error">…</div>
      - unexpected value "Epic sadface: Username and password do not match any user in this service"

    at /usr/workspace/tests/login.spec.ts:29:56
    at /usr/workspace/tests/login.spec.ts:28:20
```

# Page snapshot

```yaml
- text: Swag Labs
- textbox "Username": standard_user
- textbox "Password": password_example123
- 'heading "Epic sadface: Username and password do not match any user in this service" [level=3]':
  - button
  - text: "Epic sadface: Username and password do not match any user in this service"
- button "Login"
- heading "Accepted usernames are:" [level=4]
- text: standard_user locked_out_user problem_user performance_glitch_user error_user visual_user
- heading "Password for all users:" [level=4]
- text: secret_sauce
```

# Test source

```ts
   1 | import { test } from "../fixtures/testFixtures";
   2 | import { expect } from "@playwright/test";
   3 | import { readFileSync } from "fs";
   4 | import path from "path";
   5 |
   6 | test.describe("Verify login functionality", () => {
   7 |
   8 |     test.beforeEach("Open page", async({ signinPage }) => {
   9 |         await signinPage.open();
  10 |     });
  11 |
  12 |     test.only("Verify login on page", async({ signinPage, inventoryItemPage }) => {
  13 |         
  14 |         await test.step("Login", async() => {
  15 |             await signinPage.login(process.env.USER_NAME, process.env.PASSWORD);
  16 |         });
  17 |
  18 |         await test.step("Verify item is visible", async() => {
  19 |             await expect(inventoryItemPage.getItemName()).toBeVisible();
  20 |         });
  21 |     });
  22 |
  23 |     test.only("Verify login with incorrect data", async({ signinPage }) => {
  24 |         await test.step("Login", async() => {
  25 |             await signinPage.login(process.env.USER_NAME, process.env.INCORRECT_PASSWORD);
  26 |         });
  27 |
  28 |         await test.step("Verify error message is displayed.", async() => {
> 29 |             await expect(signinPage.getErrorMsg()).not.toHaveText("Epic sadface: Username and password do not match any user in this service");
     |                                                        ^ Error: Timed out 5000ms waiting for expect(locator).not.toHaveText(expected)
  30 |         });
  31 |     });
  32 |
  33 |     test("Verify login with parsed data", async({ signinPage }) => {
  34 |
  35 |         const file = readFileSync(path.resolve("data", "JupyterHubServer 2.txt"), { encoding: "utf-8"});
  36 |
  37 |         const machineNameValue = file.match(/Machine name:\s*(.+)/)
  38 |         const usernameValue = file.match(/Username:\s*(.*)/)
  39 |         const passwordValue = file.match(/Password:\s*(.*)/)
  40 |
  41 |         console.log(machineNameValue[1]);
  42 |         console.log(usernameValue[1]);
  43 |         console.log(passwordValue[1]);
  44 |
  45 |         await test.step("Login", async() => {
  46 |             await signinPage.login(process.env.USER_NAME, process.env.INCORRECT_PASSWORD);
  47 |         });
  48 |     });
  49 | });
```